service: api

frameworkVersion: ">=1.69.0 <2.0.0"

plugins:
  - serverless-offline

provider:
  name: aws
  runtime: nodejs12.x
  memorySize: 128
  region: ap-northeast-1
  stage: v1
  websocketsApiName: serverless-ws
  # custom routes are selected by the value of the action property in the body
  websocketsApiRouteSelectionExpression: $request.body.action

  environment:
    CONNECTION_TABLE: ${self:custom.CONNECTION_TABLE}
    CHANNEL_TABLE: ${self:custom.CHANNEL_TABLE}
    AUTH0_CLIENT_ID: ${self:custom.AUTH0_CLIENT_ID}
    AUTH0_CLIENT_PUBLIC_KEY: ${self:custom.AUTH0_CLIENT_PUBLIC_KEY}

  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:DeleteItem
        - dynamodb:Query
      Resource:
        - Fn::Join:
            - ":"
            - - arn:aws:dynamodb
              - ${self:provider.region}
              - Ref: "AWS::AccountId"
              - table/${self:custom.CONNECTION_TABLE}
        - Fn::Join:
            - ":"
            - - arn:aws:dynamodb
              - ${self:provider.region}
              - Ref: "AWS::AccountId"
              - table/${self:custom.CONNECTION_TABLE}/index/liveId-index

    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        - Fn::Join:
            - ":"
            - - arn:aws:dynamodb
              - ${self:provider.region}
              - Ref: "AWS::AccountId"
              - table/${self:custom.CHANNEL_TABLE}
        - Fn::Join:
            - ":"
            - - arn:aws:dynamodb
              - ${self:provider.region}
              - Ref: "AWS::AccountId"
              - table/${self:custom.CONNECTION_TABLE}/index/channelName-index
custom:
  CONNECTION_TABLE: campusonair-connection-table
  CHANNEL_TABLE: campusonair-channel-table
  AUTH0_CLIENT_ID: ScSOjH0LjVN9DGkguloEVURUfdJCq9u2
  AUTH0_CLIENT_PUBLIC_KEY: ${file(./auth0_public_key)}

package:
  exclude:
    - .circleci/**
    - .git/**
    - bin/**
    - test/**
    - docs/**
    - .*
    - package-lock.json
    - yarn.lock
    - README.md

functions:
  createMeeting:
    handler: src/createMeeting.handler
    events:
      - http:
          path: meeting
          method: post
          integration: lambda-proxy
          cors:
            origin: "*"

  listMeeting:
    handler: src/listMeeting.handler
    events:
      - http:
          path: meetings
          method: get
          integration: lambda-proxy
          cors:
            origin: "*"

  getMeeting:
    handler: src/getMeeting.handler
    events:
      - http:
          path: meeting/{meetingId}
          method: get
          integration: lambda-proxy
          cors:
            origin: "*"

  updateMeeting:
    handler: src/updateMeeting.handler
    events:
      - http:
          path: meeting/{meetingId}
          method: put
          integration: lambda-proxy
          cors:
            origin: "*"

  updateMember:
    handler: src/updateMember.handler
    events:
      - http:
          path: meeting/{meetingId}/{userId}
          method: put
          integration: lambda-proxy
          cors:
            origin: "*"

  deleteMeeting:
    handler: src/deleteMeeting.handler
    events:
      - http:
          path: meeting/{meetingId}
          method: delete
          integration: lambda-proxy
          cors:
            origin: "*"